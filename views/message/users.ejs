<!DOCTYPE html>
<html lang="en" data-theme="light">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ChatLock Messenger</title>
  <meta name="description" content="Secure messaging platform with real-time chat capabilities">

  <!-- Web App Manifest for PWA -->
  <link rel="manifest" href="/manifest.json">

  <!-- External Resources -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/style.css">

  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#f0f9ff',
              100: '#e0f2fe',
              200: '#bae6fd',
              300: '#7dd3fc',
              400: '#38bdf8',
              500: '#0ea5e9',
              600: '#0284c7',
              700: '#0369a1',
              800: '#075985',
              900: '#0c4a6e',
            }
          }
        }
      }
    }
  </script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"
    integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=" crossorigin="anonymous"></script>
  <script src="/socket.io/socket.io.js"></script>
</head>

<body class="bg-gray-50 dark:bg-gray-900 dark:text-gray-100 transition-colors duration-200">

  <!-- Global Loading Overlay -->
  <div id="loadingOverlay" class="fixed inset-0 bg-white dark:bg-gray-900 z-50 flex items-center justify-center transition-opacity duration-300">
    <div class="flex flex-col items-center">
      <div class="w-12 h-12 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mb-4"></div>
      <p class="text-gray-600 dark:text-gray-400">Loading ChatLock...</p>
    </div>
  </div>

  <!-- Mobile Header -->
  <header class="mobile-header fixed top-0 left-0 right-0 bg-white dark:bg-gray-800 shadow-sm z-50 p-4 flex justify-between items-center md:hidden">
    <button id="menuToggle" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white focus:outline-none transition-colors">
      <i class="fas fa-bars text-xl"></i>
    </button>
    <h1 class="text-xl font-bold flex items-center">
      <i class="fas fa-comment-dots text-primary-600 dark:text-primary-400 mr-2"></i> ChatLock
    </h1>
    <div class="flex items-center gap-4">
      <button id="themeToggleMobile" class="theme-toggle p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
        <i class="fas fa-moon dark:hidden"></i>
        <i class="fas fa-sun hidden dark:block text-yellow-300"></i>
      </button>
      <div class="relative">
        <button id="notificationBtn" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white focus:outline-none relative transition-colors">
          <i class="fas fa-bell text-xl"></i>
          <span id="unreadCount" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center hidden">0</span>
        </button>
        <div id="notificationList" class="hidden absolute right-0 mt-2 w-72 bg-white dark:bg-gray-800 rounded-lg shadow-xl z-50 border border-gray-200 dark:border-gray-700">
          <div class="p-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center bg-gray-50 dark:bg-gray-700 rounded-t-lg">
            <h3 class="font-semibold text-gray-800 dark:text-white">Notifications</h3>
            <button id="markDropdownRead" class="text-sm text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-300 flex items-center gap-2 transition-colors">
              <span>Mark all as read</span>
              <span id="markReadSpinner" class="hidden w-4 h-4 border-2 border-primary-600 dark:border-primary-400 border-t-transparent rounded-full animate-spin"></span>
            </button>
          </div>
          <div id="notificationItems" class="max-h-80 overflow-y-auto divide-y divide-gray-200 dark:divide-gray-700"></div>
        </div>
      </div>
    </div>
  </header>

  <!-- Sidebar Overlay -->
  <div id="sidebarOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden"></div>

  <div class="flex min-h-screen pt-16 md:pt-0">
    <!-- Sidebar Navigation -->
    <aside id="sidebar" class="fixed md:static inset-y-0 left-0 transform -translate-x-full md:translate-x-0 w-64 bg-white dark:bg-gray-800 shadow-md z-40 transition-transform duration-300">
      <div class="p-6 h-full flex flex-col">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold flex items-center">
            <i class="fas fa-comment-dots text-primary-600 dark:text-primary-400 mr-2"></i> ChatLock
          </h2>
          <div class="flex items-center gap-2">
            <button id="themeToggle" class="theme-toggle p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
              <i class="fas fa-moon dark:hidden"></i>
              <i class="fas fa-sun hidden dark:block text-yellow-300"></i>
            </button>
            <button id="closeSidebar" class="md:hidden text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white focus:outline-none transition-colors">
              <i class="fas fa-times text-lg"></i>
            </button>
          </div>
        </div>

        <!-- Profile Section -->
        <div class="profile-section mb-6">
          <a href="/api/v1/user/profile" class="flex items-center space-x-3 hover:bg-gray-100 dark:hover:bg-gray-700 p-2 rounded-lg transition-colors">
            <img src="<%= user.profilePic || 'https://res.cloudinary.com/dzdnwsojc/image/upload/v1746804708/rkwqxwswd9plkd7wpoy7.jpg' %>" 
                 alt="Profile" class="w-10 h-10 rounded-full object-cover border-2 border-primary-500 dark:border-primary-400">
            <div>
              <p class="font-semibold text-gray-800 dark:text-white flex items-center">
                @<%= user.username %>
                <% if (user.username === 'code_with_irfan') { %>
                  <span title="Verified" class="ml-1 text-blue-500"><i class="fas fa-check-circle"></i></span>
                <% } %>
              </p>
              <p class="text-sm <%= user.isOnline === 'true' ? 'text-green-500' : 'text-gray-500 dark:text-gray-400' %> truncate">
                <%= user.isOnline === "true" ? 'Online' : 'Offline' %>
              </p>
            </div>
          </a>
        </div>

        <!-- Search Bar -->
        <div class="relative mb-6">
          <div class="relative">
            <input type="text" id="userSearch" placeholder="Search users..."
                   class="w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-700 text-gray-800 dark:text-white rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent text-sm">
            <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500"></i>
          </div>
          <div id="searchResults" class="hidden absolute left-0 right-0 mt-1 bg-white dark:bg-gray-800 rounded-lg shadow-lg z-50 border border-gray-200 dark:border-gray-700 max-h-60 overflow-y-auto">
            <div id="searchLoading" class="p-4 hidden">
              <div class="flex justify-center">
                <div class="w-6 h-6 border-2 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Navigation -->
        <nav class="space-y-2 flex-1">
          <a href="/api/v1/user/chat" class="flex items-center px-4 py-2 rounded-lg bg-primary-100 dark:bg-gray-700 text-primary-600 dark:text-primary-400 font-medium hover:bg-primary-200 dark:hover:bg-gray-600 transition-colors">
            <i class="fas fa-inbox mr-3"></i> Inbox
            <span id="sidebarUnreadCount" class="ml-auto bg-primary-600 dark:bg-primary-400 text-white text-xs px-2 py-1 rounded-full hidden">0</span>
          </a>
          <a href="/api/v1/user/favourate" class="flex items-center px-4 py-2 rounded-lg text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
            <i class="fas fa-star mr-3"></i> Starred
          </a>
          <a href="/api/v1/user/setting" class="flex items-center px-4 py-2 rounded-lg text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
            <i class="fas fa-cog mr-3"></i> Settings
          </a>
        </nav>

        <!-- Logout Button -->
        <a href="/api/v1/auth/logout" class="mt-4 w-full py-2 px-4 text-center bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white rounded-lg font-medium transition-colors hover:shadow-md">
          Logout
        </a>
      </div>
    </aside>

    <!-- Main Content Area -->
    <main class="main-content flex-1 p-6 ml-0 md:ml-64">
      <div class="max-w-3xl mx-auto">
        <h2 class="text-2xl font-semibold text-gray-800 dark:text-white mb-6">Your Conversations</h2>

        <% if (query.success === 'UserAddedToFavourites') { %>
          <div class="bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-4 py-2 rounded mb-4">
            ✅ User added to favourites
          </div>
        <% } %>
        <% if (query.success === 'UserRemovedFromFavourites') { %>
          <div class="bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 px-4 py-2 rounded mb-4">
            ❌ User removed from favourites
          </div>
        <% } %>

        <!-- Search Info (Mobile) -->
        <div class="md:hidden mb-4 bg-primary-100 dark:bg-gray-700 p-3 rounded-lg">
          <p class="text-sm text-primary-600 dark:text-primary-400">
            <i class="fas fa-info-circle mr-2"></i> Use the search in the sidebar to find users
          </p>
        </div>

        <div id="userListContainer" class="space-y-3">
          <!-- Skeleton Loading for User List -->
          <div id="userListSkeleton" class="space-y-3 hidden">
            <% for(let i = 0; i < 3; i++) { %>
              <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm">
                <div class="flex items-center space-x-4">
                  <div class="w-12 h-12 rounded-full bg-gray-200 dark:bg-gray-600 animate-pulse"></div>
                  <div class="flex-1 space-y-2">
                    <div class="h-4 w-1/3 bg-gray-200 dark:bg-gray-600 rounded animate-pulse"></div>
                    <div class="h-3 w-1/4 bg-gray-200 dark:bg-gray-600 rounded animate-pulse"></div>
                  </div>
                </div>
              </div>
            <% } %>
          </div>

          <!-- Empty State -->
          <div id="emptyState" class="empty-state <%= allUser.length > 0 ? 'hidden' : '' %> text-center py-10">
            <i class="fas fa-comments text-4xl text-gray-400 dark:text-gray-500 mb-4"></i>
            <h3 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">No conversations yet</h3>
            <p class="text-gray-500 dark:text-gray-400 mb-4">Start a new conversation by searching for users</p>
            <button onclick="document.getElementById('menuToggle').click()" class="px-4 py-2 bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white rounded-lg font-medium transition-colors">
              Open Search
            </button>
          </div>

          <!-- Actual User List -->
          <div id="userListContent" class="space-y-3">
            <% allUser.forEach(user => { %>
              <div class="user-item bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm hover:shadow-md transition-all" data-user-id="<%= user._id %>">
                <a href="/api/v1/user/chat/<%= user._id %>" class="flex items-center space-x-4 user-link">
                  <div class="relative">
                    <img src="<%= user.profilePic || 'https://res.cloudinary.com/dzdnwsojc/image/upload/v1746804708/rkwqxwswd9plkd7wpoy7.jpg' %>" 
                         alt="<%= user.username %>" class="w-12 h-12 rounded-full object-cover border-2 border-gray-200 dark:border-gray-600">
                    <% if (user.unreadCount > 0) { %>
                      <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                        <%= user.unreadCount %>
                      </span>
                    <% } %>
                  </div>
                  <div class="flex-1 min-w-0">
                    <div class="flex items-center">
                      <span class="font-semibold text-gray-800 dark:text-white truncate">@<%= user.username %></span>
                      <% if (user.username === 'code_with_irfan') { %>
                        <span title="Verified" class="ml-1 text-blue-500"><i class="fas fa-check-circle"></i></span>
                      <% } %>
                    </div>
                    <p class="text-sm <%= user.isOnline === 'true' ? 'text-green-500' : 'text-gray-500 dark:text-gray-400' %> truncate">
                      <%= user.isOnline === 'true' ? 'Online' : 'Offline' %>
                    </p>
                  </div>
                </a>
              </div>
            <% }) %>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Mobile Footer Navigation -->
  <nav class="mobile-footer-nav md:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 shadow-lg flex justify-around items-center h-16 z-30">
    <a href="/api/v1/user/chat" class="mobile-nav-item active flex flex-col items-center justify-center text-primary-600 dark:text-primary-400">
      <i class="fas fa-comment-dots text-xl"></i>
      <span class="text-xs mt-1">Chats</span>
    </a>
    <a href="/api/v1/user/favourate" class="mobile-nav-item flex flex-col items-center justify-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
      <i class="fas fa-star text-xl"></i>
      <span class="text-xs mt-1">Favorites</span>
    </a>
    <a href="/api/v1/user/search" class="mobile-nav-item flex flex-col items-center justify-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
      <i class="fas fa-search text-xl"></i>
      <span class="text-xs mt-1">Search</span>
    </a>
    <a href="/api/v1/user/notifications" class="mobile-nav-item flex flex-col items-center justify-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 relative">
      <i class="fas fa-bell text-xl"></i>
      <span class="text-xs mt-1">Notifications</span>
      <span id="mobileUnreadBadge" class="absolute top-0 right-2 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center hidden">0</span>
    </a>
    <a href="/api/v1/user/profile" class="mobile-nav-item flex flex-col items-center justify-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200">
      <i class="fas fa-user text-xl"></i>
      <span class="text-xs mt-1">Profile</span>
    </a>
  </nav>

  <!-- Message notification -->
  <div id="messageNotification" class="hidden fixed bottom-4 right-4 w-72 bg-white dark:bg-gray-800 rounded-lg shadow-xl z-50 border border-gray-200 dark:border-gray-700 overflow-hidden">
    <div class="p-3 flex items-start gap-3 cursor-pointer">
      <img id="messageNotificationAvatar" src="" alt="Sender" class="w-10 h-10 rounded-full object-cover">
      <div class="flex-1 min-w-0">
        <p id="messageNotificationSender" class="font-medium text-gray-800 dark:text-white truncate"></p>
        <p id="messageNotificationText" class="text-sm text-gray-600 dark:text-gray-300 truncate"></p>
      </div>
      <button class="message-notification-close text-gray-400 hover:text-gray-600 dark:hover:text-gray-200">
        <i class="fas fa-times"></i>
      </button>
    </div>
  </div>

 <script>
  // Current user context
  const currentUserId = "<%= user._id %>";
  const currentUserTheme = "<%= user.theme || 'light' %>"; // Get theme from user token
  const socket = io("/ChatLock", {
    auth: { token: currentUserId },
    transports: ['websocket'],
    query: { theme: currentUserTheme }
  });

  // State management
  const userUnreadCounts = {};
  let currentChatUserId = null;
  let isUserInChat = false;
  let notifications = [];
  let allUsers = JSON.parse('<%- JSON.stringify(allUser) %>');
  let isSearching = false;
  
  // Initialize theme state - fixed the localStorage check
  let darkMode = currentUserTheme === 'dark' || 
                (currentUserTheme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches) ||
                localStorage.getItem('darkMode') === 'true';

  // Initialize theme
  function initTheme() {
    if (darkMode) {
      document.documentElement.setAttribute('data-theme', 'dark');
      document.body.classList.add('dark');
      document.querySelectorAll('.theme-toggle i.fa-moon').forEach(el => el.classList.add('hidden'));
      document.querySelectorAll('.theme-toggle i.fa-sun').forEach(el => el.classList.remove('hidden'));
    } else {
      document.documentElement.setAttribute('data-theme', 'light');
      document.body.classList.remove('dark');
      document.querySelectorAll('.theme-toggle i.fa-moon').forEach(el => el.classList.remove('hidden'));
      document.querySelectorAll('.theme-toggle i.fa-sun').forEach(el => el.classList.add('hidden'));
    }
  }

  // Toggle theme - fixed localStorage storage
  function toggleTheme() {
    darkMode = !darkMode;
    localStorage.setItem('darkMode', darkMode.toString()); // Store as string
    
    // Update theme on server
    fetch('/api/v1/user/update-theme', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
      },
      body: JSON.stringify({ theme: darkMode ? 'dark' : 'light' })
    }).catch(err => console.error('Error updating theme:', err));
    
    initTheme();
  }

  // Check if user is in active chat
  function checkActiveChat() {
    const path = window.location.pathname;
    const chatPathRegex = /^\/api\/v1\/user\/chat\/([a-f\d]{24})$/i;
    const match = path.match(chatPathRegex);
    
    if (match) {
      currentChatUserId = match[1];
      isUserInChat = true;
    }
  }

  // Fetch initial unread counts
  async function fetchInitialUnreadCounts() {
    try {
      const response = await fetch('/api/v1/user/unread-counts', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        Object.assign(userUnreadCounts, data);
        updateGlobalUnreadCount();
        
        // Update individual user badges
        for (const [userId, count] of Object.entries(data)) {
          updateUserBadge(userId, count);
        }
      }
    } catch (error) {
      console.error('Failed to fetch unread counts:', error);
    }
  }

  // Initialize notification badges
  function initializeBadges() {
    const totalUnread = Object.values(userUnreadCounts).reduce((sum, count) => sum + count, 0);
    updateGlobalUnreadCount(totalUnread);
  }

  // Update user-specific badge
  function updateUserBadge(userId, count) {
    const userItem = document.querySelector(`.user-item[data-user-id="${userId}"]`);
    if (userItem) {
      const badge = userItem.querySelector('.relative span');
      if (count > 0) {
        if (!badge) {
          const newBadge = document.createElement('span');
          newBadge.className = 'absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center';
          newBadge.textContent = count;
          userItem.querySelector('.relative').appendChild(newBadge);
        } else {
          badge.textContent = count;
        }
      } else if (badge) {
        badge.remove();
      }
    }
  }

  // Update global unread count
  function updateGlobalUnreadCount() {
    const totalUnread = Object.values(userUnreadCounts).reduce((sum, count) => sum + count, 0);
    
    // Update sidebar badge
    const sidebarBadge = document.getElementById('sidebarUnreadCount');
    if (totalUnread > 0) {
      sidebarBadge.textContent = totalUnread;
      sidebarBadge.classList.remove('hidden');
    } else {
      sidebarBadge.classList.add('hidden');
    }
    
    // Update mobile notification badge
    const mobileBadge = document.getElementById('mobileUnreadBadge');
    if (totalUnread > 0) {
      mobileBadge.textContent = totalUnread > 9 ? '9+' : totalUnread;
      mobileBadge.classList.remove('hidden');
    } else {
      mobileBadge.classList.add('hidden');
    }
    
    // Update notification bell badge
    const bellBadge = document.getElementById('unreadCount');
    if (totalUnread > 0) {
      bellBadge.textContent = totalUnread > 9 ? '9+' : totalUnread;
      bellBadge.classList.remove('hidden');
    } else {
      bellBadge.classList.add('hidden');
    }
  }

  // Show message notification
  function showMessageNotification(data) {
    const notification = document.getElementById('messageNotification');
    const avatar = document.getElementById('messageNotificationAvatar');
    const sender = document.getElementById('messageNotificationSender');
    const text = document.getElementById('messageNotificationText');
    
    avatar.src = data.senderAvatar || 'https://res.cloudinary.com/dzdnwsojc/image/upload/v1746804708/rkwqxwswd9plkd7wpoy7.jpg';
    sender.textContent = data.senderName;
    text.textContent = data.preview;
    
    notification.classList.remove('hidden');
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      notification.classList.add('hidden');
    }, 5000);
  }

  // Socket.IO event listeners
  socket.on('connect', () => {
    console.log('Connected to socket server');
  });

  socket.on('disconnect', () => {
    console.log('Disconnected from socket server');
  });

  socket.on('new_message_notification', (data) => {
    // Update unread counts
    if (!userUnreadCounts[data.senderId]) {
      userUnreadCounts[data.senderId] = 0;
    }
    userUnreadCounts[data.senderId]++;
    updateUserBadge(data.senderId, userUnreadCounts[data.senderId]);
    updateGlobalUnreadCount();
    
    // Show notification
    if (!document.hasFocus() || !isUserInChat || data.senderId !== currentChatUserId) {
      showMessageNotification(data);
    }
  });

  // Close notification when clicked
  document.querySelectorAll('.message-notification-close').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      document.getElementById('messageNotification').classList.add('hidden');
    });
  });

  // Theme toggle event listeners
  document.getElementById('themeToggle')?.addEventListener('click', toggleTheme);
  document.getElementById('themeToggleMobile')?.addEventListener('click', toggleTheme);

  // Initialize the app
  window.addEventListener('DOMContentLoaded', () => {
    try {
      initTheme();
      checkActiveChat();
      fetchInitialUnreadCounts();
      initializeBadges();
      
      // Hide loading overlay
      setTimeout(() => {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
          loadingOverlay.style.opacity = '0';
          setTimeout(() => {
            loadingOverlay.style.display = 'none';
          }, 300);
        }
      }, 1000);
    } catch (error) {
      console.error('Initialization error:', error);
      // Ensure loading overlay is hidden even if there's an error
      document.getElementById('loadingOverlay').style.display = 'none';
    }
  });
</script>
</body>
</html>