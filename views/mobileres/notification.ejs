<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Notifications - ChatLock</title>
  <meta name="description" content="View your notifications on ChatLock Messenger">

  <!-- External Resources -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>

  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #ebf2ff;
      --secondary: #3a0ca3;
      --accent: #06d6a0;
      --dark: #1a1b25;
      --light: #f8f9fa;
      --gray: #6c757d;
      --gray-light: #e9ecef;
      --success: #06d6a0;
      --warning: #ffd166;
      --danger: #ef476f;

      /* Dark mode variables */
      --dark-bg: #121212;
      --dark-surface: #1e1e1e;
      --dark-text: #e0e0e0;
      --dark-border: #333333;
      --dark-card: #252525;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--light);
      color: var(--dark);
      min-height: 100vh;
      overflow-x: hidden;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    /* Dark mode styles */
    body.dark-mode {
      background-color: var(--dark-bg);
      color: var(--dark-text);
    }

    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      backdrop-filter: blur(5px);
      transition: opacity 0.3s ease;
    }

    .dark-mode .loading-overlay {
      background-color: rgba(0, 0, 0, 0.8);
    }

    /* Notification Items */
    .notification-item {
      display: flex;
      padding: 16px;
      border-radius: 8px;
      margin-bottom: 12px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      border: 1px solid var(--gray-light);
      background-color: white;
      opacity: 0;
      transform: translateY(10px);
      animation: fadeIn 0.3s forwards;
    }

    @keyframes fadeIn {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .notification-item.unread {
      background-color: var(--primary-light);
    }

    .notification-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .notification-avatar {
      position: relative;
      margin-right: 16px;
      flex-shrink: 0;
    }

    .avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .notification-content {
      flex: 1;
      min-width: 0;
    }

    .notification-sender {
      font-weight: 600;
      margin-bottom: 4px;
      display: flex;
      align-items: center;
    }

    .notification-message {
      color: var(--gray);
      margin-bottom: 4px;
    }

    .notification-time {
      font-size: 12px;
      color: var(--gray);
    }

    .notification-actions {
      display: flex;
      gap: 8px;
      margin-top: 8px;
    }

    .notification-action-btn {
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .mark-read-btn {
      background-color: var(--primary-light);
      color: var(--primary);
      border: none;
    }

    .mark-read-btn:hover {
      background-color: var(--primary);
      color: white;
    }

    .view-chat-btn {
      background-color: var(--primary);
      color: white;
      border: none;
    }

    .view-chat-btn:hover {
      background-color: var(--secondary);
    }

    /* Mobile Footer Navigation */
    .mobile-footer-nav {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background-color: white;
      border-top: 1px solid var(--gray-light);
      display: flex;
      justify-content: space-around;
      padding: 12px 0;
      z-index: 1000;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
    }

    .dark-mode .mobile-footer-nav {
      background-color: var(--dark-surface);
      border-top-color: var(--dark-border);
    }

    .mobile-nav-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      color: var(--gray);
      text-decoration: none;
      font-size: 10px;
      flex: 1;
      position: relative;
      transition: all 0.2s ease;
    }

    .mobile-nav-item.active {
      color: var(--primary);
    }

    .mobile-nav-item i {
      font-size: 20px;
      margin-bottom: 4px;
    }

    .mobile-nav-badge {
      position: absolute;
      top: -2px;
      right: 20%;
      background-color: var(--danger);
      color: white;
      border-radius: 50%;
      width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      font-weight: bold;
    }

    /* New Notification Alert */
    .new-notification-alert {
      position: fixed;
      bottom: 80px;
      left: 50%;
      transform: translateX(-50%);
      background-color: var(--primary);
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 1000;
      max-width: 90%;
      animation: slideUp 0.3s ease-out;
      cursor: pointer;
    }

    @keyframes slideUp {
      from {
        transform: translateX(-50%) translateY(100%);
        opacity: 0;
      }
      to {
        transform: translateX(-50%) translateY(0);
        opacity: 1;
      }
    }

    /* Empty State */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      padding: 2rem;
      color: var(--gray);
    }

    .empty-state-icon {
      font-size: 3rem;
      color: var(--gray-light);
      margin-bottom: 1rem;
    }

    /* Spinner */
    .spinner {
      border: 3px solid var(--gray-light);
      border-top: 3px solid var(--primary);
      border-radius: 50%;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Responsive Design */
    @media (min-width: 768px) {
      .mobile-footer-nav {
        display: none;
      }
    }
  </style>
</head>

<body class="bg-gray-50">
  <!-- Loading Overlay -->
  <div id="globalLoading" class="loading-overlay">
    <div class="flex flex-col items-center">
      <div class="spinner mb-4"></div>
      <p class="text-gray-600">Loading notifications...</p>
    </div>
  </div>

  <!-- Main Content -->
  <div class="max-w-3xl mx-auto p-6 pb-24 md:pb-6">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold flex items-center">
        <i class="fas fa-bell mr-3 text-primary"></i> Notifications
      </h1>
      <button id="markAllReadBtn" class="text-primary hover:text-secondary flex items-center gap-2">
        <span>Mark all as read</span>
        <i class="fas fa-check-circle"></i>
      </button>
    </div>

    <div id="notificationsContainer">
      <!-- Empty state -->
      <div id="emptyState" class="empty-state">
        <i class="fas fa-bell-slash empty-state-icon"></i>
        <h3 class="text-lg font-medium text-gray-700 mb-2">No notifications yet</h3>
        <p class="text-gray-500">Your notifications will appear here</p>
      </div>

      <!-- Notifications list -->
      <div id="notificationsList" class="space-y-3"></div>
    </div>
  </div>

  <!-- Mobile Bottom Navigation Bar -->
  <nav class="mobile-footer-nav md:hidden">
    <a href="/api/v1/user/chat" class="mobile-nav-item">
      <i class="fas fa-comment-dots"></i>
      <span>Chats</span>
    </a>
    <a href="/api/v1/user/favorites" class="mobile-nav-item">
      <i class="fas fa-star"></i>
      <span>Favorites</span>
    </a>
    <a href="/api/v1/user/search" class="mobile-nav-item">
      <i class="fas fa-search"></i>
      <span>Search</span>
    </a>
    <a href="/api/v1/user/notifications" class="mobile-nav-item active">
      <i class="fas fa-bell"></i>
      <span>Alerts</span>
      <span id="mobileNotificationBadge" class="mobile-nav-badge" style="display: none;">0</span>
    </a>
    <a href="/api/v1/user/profile" class="mobile-nav-item">
      <i class="fas fa-user"></i>
      <span>Profile</span>
    </a>
  </nav>

  <!-- New Notification Alert -->
  <div id="newNotificationAlert" class="new-notification-alert hidden">
    <i class="fas fa-bell"></i>
    <div id="alertMessage">New notification</div>
    <button id="closeAlert" class="text-white hover:text-gray-200">
      <i class="fas fa-times"></i>
    </button>
  </div>

  <script>
    // Current user context
    const currentUserId = "<%= typeof user !== 'undefined' ? user._id : '' %>";
    let notifications = [];
    let darkMode = localStorage.getItem('darkMode') === 'true';
    let socket = io();

    // Initialize page
    document.addEventListener('DOMContentLoaded', async () => {
      initDarkMode();
      await loadNotifications();
      setupSocket();
      hideLoading();

      // Mark all as read button
      document.getElementById('markAllReadBtn').addEventListener('click', markAllNotificationsAsRead);
      
      // Close alert button
      document.getElementById('closeAlert').addEventListener('click', () => {
        document.getElementById('newNotificationAlert').classList.add('hidden');
      });
    });

    // Initialize dark mode
    function initDarkMode() {
      if (darkMode) {
        document.body.classList.add('dark-mode');
      } else {
        document.body.classList.remove('dark-mode');
      }
    }

    // Show loading overlay
    function showLoading() {
      document.getElementById('globalLoading').style.display = 'flex';
    }

    // Hide loading overlay
    function hideLoading() {
      document.getElementById('globalLoading').style.opacity = '0';
      setTimeout(() => {
        document.getElementById('globalLoading').style.display = 'none';
      }, 300);
    }

    // Load notifications with smooth loading
    async function loadNotifications() {
      showLoading();
      try {
        const response = await fetch('/api/v1/user/notifications-all', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });
        
        const data = await response.json();
        
        if (data.success) {
          notifications = data.notifications;
          renderNotifications();
          updateBadgeCount();
        }
      } catch (err) {
        console.error('Error loading notifications:', err);
        showToast('Failed to load notifications', 'error');
      }
    }

    // Render notifications with animation
    function renderNotifications() {
      const container = document.getElementById('notificationsList');
      const emptyState = document.getElementById('emptyState');
      
      container.innerHTML = '';
      
      if (notifications.length === 0) {
        emptyState.classList.remove('hidden');
        return;
      }
      
      emptyState.classList.add('hidden');
      
      notifications.forEach((notification, index) => {
        setTimeout(() => {
          const isRead = notification.isRead || false;
          const notificationElement = createNotificationElement(notification, isRead);
          container.appendChild(notificationElement);
        }, index * 100); // Staggered animation
      });
    }

    // Create notification element
    function createNotificationElement(notification, isRead) {
      const element = document.createElement('div');
      element.className = `notification-item ${isRead ? '' : 'unread'}`;
      element.dataset.id = notification._id;
      
      const readIcon = isRead ? '' : '<i class="fas fa-circle text-primary text-xs ml-2" title="Unread"></i>';
      
      element.innerHTML = `
        <div class="notification-avatar">
          <img src="${notification.senderDetails?.profilePic || 'default-avatar.jpg'}" 
               alt="${notification.senderDetails?.username || 'System'}" 
               class="avatar">
        </div>
        <div class="notification-content">
          <div class="notification-sender">
            ${notification.senderDetails?.username || 'System'}
            ${notification.senderDetails?.username === 'code_with_irfan' ? 
              '<span title="Verified" class="verified-badge"><i class="fas fa-check-circle"></i></span>' : ''}
            ${readIcon}
          </div>
          <div class="notification-message">${notification.message}</div>
          <div class="notification-time">${formatTime(notification.createdAt)}</div>
          <div class="notification-actions">
            ${!isRead ? `
              <button class="notification-action-btn mark-read-btn" data-id="${notification._id}">
                <i class="fas fa-check mr-1"></i> Mark as read
              </button>
            ` : ''}
            ${notification.senderDetails?._id ? `
              <a href="/api/v1/user/chat/${notification.senderDetails._id}" class="notification-action-btn view-chat-btn">
                <i class="fas fa-comment-dots mr-1"></i> View chat
              </a>
            ` : ''}
          </div>
        </div>
      `;
      
      // Add click handler for mark as read
      const markReadBtn = element.querySelector('.mark-read-btn');
      if (markReadBtn) {
        markReadBtn.addEventListener('click', async (e) => {
          e.stopPropagation();
          await markNotificationAsRead(notification._id);
        });
      }
      
      return element;
    }

    // Format time
    function formatTime(timestamp) {
      const now = new Date();
      const date = new Date(timestamp);
      const diffInSeconds = Math.floor((now - date) / 1000);

      if (diffInSeconds < 60) return 'Just now';
      if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
      if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
      return `${Math.floor(diffInSeconds / 86400)}d ago`;
    }

    notificationId =  notification._id;
    // Mark notification as read
    async function markNotificationAsRead(notificationId) {
      try {
        const response = await fetch(`/api/v1/user/notifications/${notificationId}/mark-viewed`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          // Update the notification in our local array
          const notification = notifications.find(n => n._id === notificationId);
          if (notification) {
            notification.isRead = true;
          }
          
          // Re-render notifications
          renderNotifications();
          updateBadgeCount();
        }
      } catch (err) {
        console.error('Error marking notification as read:', err);
        showToast('Failed to mark as read', 'error');
      }
    }

    // Mark all notifications as read
    async function markAllNotificationsAsRead() {
      try {
        const markAllBtn = document.getElementById('markAllReadBtn');
        markAllBtn.innerHTML = '<span>Marking all as read...</span><div class="spinner" style="width: 16px; height: 16px;"></div>';
        
        const response = await fetch('/api/v1/user/notifications/mark-all-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          // Update all notifications in our local array
          notifications.forEach(n => n.isRead = true);
          
          // Re-render notifications
          renderNotifications();
          updateBadgeCount();
          
          showToast('All notifications marked as read', 'success');
        }
      } catch (err) {
        console.error('Error marking all notifications as read:', err);
        showToast('Failed to mark all as read', 'error');
      } finally {
        const markAllBtn = document.getElementById('markAllReadBtn');
        markAllBtn.innerHTML = '<span>Mark all as read</span><i class="fas fa-check-circle"></i>';
      }
    }

    // Setup Socket.io for real-time updates
    function setupSocket() {
      socket.on('connect', () => {
        socket.emit('join-notifications', currentUserId);
      });

      socket.on('new-notification', (notification) => {
        // Add new notification to top
        notifications.unshift(notification);
        
        // Show alert
        showNewNotificationAlert(notification);
        
        // Update UI
        updateBadgeCount();
        renderNotifications();
      });
    }

    // Show new notification alert
    function showNewNotificationAlert(notification) {
      const alert = document.getElementById('newNotificationAlert');
      const message = document.getElementById('alertMessage');
      
      message.textContent = `New message from ${notification.senderDetails?.username || 'System'}`;
      alert.classList.remove('hidden');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        alert.classList.add('hidden');
      }, 5000);
      
      // Click to view
      alert.addEventListener('click', () => {
        if (notification.senderDetails?._id) {
          window.location.href = `/api/v1/user/chat/${notification.senderDetails._id}`;
        }
      });
    }

    // Update mobile badge count
    function updateBadgeCount() {
      const unreadCount = notifications.filter(n => !n.isRead).length;
      const badge = document.getElementById('mobileNotificationBadge');
      
      if (unreadCount > 0) {
        badge.textContent = unreadCount > 9 ? '9+' : unreadCount;
        badge.style.display = 'flex';
      } else {
        badge.style.display = 'none';
      }
    }

    // Toast notification function
    function showToast(message, type = 'info') {
      const toast = document.createElement('div');
      toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-lg shadow-lg text-white ${type === 'success' ? 'bg-success' :
        type === 'error' ? 'bg-danger' :
          type === 'warning' ? 'bg-warning' : 'bg-primary'
        }`;
      toast.textContent = message;
      document.body.appendChild(toast);

      setTimeout(() => {
        toast.classList.add('opacity-0', 'transition-opacity');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }
  </script>
</body>
</html>