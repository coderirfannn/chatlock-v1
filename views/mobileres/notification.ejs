<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Notifications - ChatLock</title>
  <meta name="description" content="View your notifications on ChatLock Messenger">

  <!-- External Resources -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"
    integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=" crossorigin="anonymous"></script>

  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #ebf2ff;
      --secondary: #3a0ca3;
      --accent: #06d6a0;
      --dark: #1a1b25;
      --light: #f8f9fa;
      --gray: #6c757d;
      --gray-light: #e9ecef;
      --success: #06d6a0;
      --warning: #ffd166;
      --danger: #ef476f;

      /* Dark mode variables */
      --dark-bg: #121212;
      --dark-surface: #1e1e1e;
      --dark-text: #e0e0e0;
      --dark-border: #333333;
      --dark-card: #252525;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--light);
      color: var(--dark);
      min-height: 100vh;
      overflow-x: hidden;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    /* Dark mode styles */
    body.dark-mode {
      background-color: var(--dark-bg);
      color: var(--dark-text);
    }

    .dark-mode .notification-item {
      background-color: var(--dark-card);
      border-color: var(--dark-border);
    }

    .dark-mode .notification-item.unread {
      background-color: rgba(67, 97, 238, 0.1);
    }

    .dark-mode .notification-time {
      color: var(--gray);
    }

    /* Notification Badge */
    .notification-badge {
      position: absolute;
      top: -4px;
      right: -4px;
      width: 20px;
      height: 20px;
      background-color: var(--danger);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: 600;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    /* Status Indicators */
    .online-status::before {
      content: '';
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: var(--success);
      margin-right: 6px;
      box-shadow: 0 0 0 2px rgba(6, 214, 160, 0.2);
    }

    .offline-status::before {
      content: '';
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: var(--gray);
      margin-right: 6px;
    }

    /* Avatar Styles */
    .avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    /* Verified Badge */
    .verified-badge {
      color: var(--primary);
      font-size: 0.75rem;
      margin-left: 0.25rem;
    }

    /* Loading Spinner */
    .spinner {
      border: 3px solid var(--gray-light);
      border-top: 3px solid var(--primary);
      border-radius: 50%;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    /* Notification Items */
    .notification-item {
      display: flex;
      padding: 16px;
      border-radius: 8px;
      margin-bottom: 12px;
      transition: all 0.2s ease;
      border: 1px solid var(--gray-light);
      background-color: white;
    }

    .notification-item.unread {
      background-color: var(--primary-light);
    }

    .notification-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .notification-avatar {
      position: relative;
      margin-right: 16px;
      flex-shrink: 0;
    }

    .notification-content {
      flex: 1;
      min-width: 0;
    }

    .notification-sender {
      font-weight: 600;
      margin-bottom: 4px;
      display: flex;
      align-items: center;
    }

    .notification-message {
      color: var(--gray);
      margin-bottom: 4px;
    }

    .notification-time {
      font-size: 12px;
      color: var(--gray);
    }

    .notification-actions {
      display: flex;
      gap: 8px;
      margin-top: 8px;
    }

    .notification-action-btn {
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .mark-read-btn {
      background-color: var(--primary-light);
      color: var(--primary);
      border: none;
    }

    .mark-read-btn:hover {
      background-color: var(--primary);
      color: white;
    }

    .view-chat-btn {
      background-color: var(--primary);
      color: white;
      border: none;
    }

    .view-chat-btn:hover {
      background-color: var(--secondary);
    }

    /* Empty State */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      padding: 2rem;
      color: var(--gray);
    }

    .empty-state-icon {
      font-size: 3rem;
      color: var(--gray-light);
      margin-bottom: 1rem;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .notification-item {
        padding: 12px;
      }
      
      .notification-avatar {
        margin-right: 12px;
      }
    }
  </style>
</head>

<body class="bg-gray-50">
  <div class="max-w-3xl mx-auto p-6">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold flex items-center">
        <i class="fas fa-bell mr-3 text-primary"></i> Notifications
      </h1>
      <button id="markAllReadBtn" class="text-primary hover:text-secondary flex items-center gap-2">
        <span>Mark all as read</span>
        <i class="fas fa-check-circle"></i>
      </button>
    </div>

    <div id="notificationsContainer">
      <!-- Loading state -->
      <div id="loadingState" class="flex justify-center py-8">
        <div class="spinner"></div>
      </div>

      <!-- Empty state (hidden by default) -->
      <div id="emptyState" class="empty-state hidden">
        <i class="fas fa-bell-slash empty-state-icon"></i>
        <h3 class="text-lg font-medium text-gray-700 mb-2">No notifications yet</h3>
        <p class="text-gray-500">Your notifications will appear here</p>
      </div>

      <!-- Notifications will be inserted here -->
      <div id="notificationsList" class="space-y-3"></div>
    </div>
  </div>

  <script>
    // Current user context
    const currentUserId = "<%= user._id %>";
    let notifications = [];
    let darkMode = localStorage.getItem('darkMode') === 'true';

    // Initialize dark mode
    function initDarkMode() {
      if (darkMode) {
        document.body.classList.add('dark-mode');
      } else {
        document.body.classList.remove('dark-mode');
      }
    }

    // Format time
    function formatTime(timestamp) {
      const now = new Date();
      const date = new Date(timestamp);
      const diffInSeconds = Math.floor((now - date) / 1000);

      if (diffInSeconds < 60) return 'Just now';
      if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
      if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
      return `${Math.floor(diffInSeconds / 86400)}d ago`;
    }

    // Mark notification as read
    async function markNotificationAsRead(notificationId) {
      try {
        const response = await fetch(`/api/v1/user/notifications/${notificationId}/mark-viewed`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          // Update the notification in our local array
          const notification = notifications.find(n => n._id === notificationId);
          if (notification) {
            notification.isRead = true;
          }
          
          // Re-render notifications
          renderNotifications();
          
          // Update the global unread count (if needed)
          updateUnreadCount();
        }
      } catch (err) {
        console.error('Error marking notification as read:', err);
      }
    }

    // Mark all notifications as read
    async function markAllNotificationsAsRead() {
      try {
        const markAllBtn = document.getElementById('markAllReadBtn');
        markAllBtn.innerHTML = '<span>Marking all as read...</span><div class="spinner" style="width: 16px; height: 16px;"></div>';
        
        const response = await fetch('/api/v1/user/notifications/mark-all-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          // Update all notifications in our local array
          notifications.forEach(n => n.isRead = true);
          
          // Re-render notifications
          renderNotifications();
          
          // Update the global unread count
          updateUnreadCount();
          
          showToast('All notifications marked as read', 'success');
        }
      } catch (err) {
        console.error('Error marking all notifications as read:', err);
        showToast('Failed to mark all as read', 'error');
      } finally {
        const markAllBtn = document.getElementById('markAllReadBtn');
        markAllBtn.innerHTML = '<span>Mark all as read</span><i class="fas fa-check-circle"></i>';
      }
    }

    // Update global unread count (if needed)
    async function updateUnreadCount() {
      try {
        // You might want to update a global unread count badge here
        // For example, if you have a badge in your main navigation
      } catch (err) {
        console.error('Error updating unread count:', err);
      }
    }

    // Render notifications
    function renderNotifications() {
      const container = document.getElementById('notificationsList');
      const loadingState = document.getElementById('loadingState');
      const emptyState = document.getElementById('emptyState');
      
      // Clear existing content
      container.innerHTML = '';
      
      // Hide loading state
      loadingState.classList.add('hidden');
      
      if (notifications.length === 0) {
        emptyState.classList.remove('hidden');
        return;
      }
      
      emptyState.classList.add('hidden');
      
      notifications.forEach(notification => {
        const isRead = notification.isRead || false;
        const notificationElement = document.createElement('div');
        notificationElement.className = `notification-item ${isRead ? '' : 'unread'}`;
        notificationElement.dataset.id = notification._id;
        
        const readIcon = isRead ? '' : '<i class="fas fa-circle text-primary text-xs ml-2" title="Unread"></i>';
        
        notificationElement.innerHTML = `
          <div class="notification-avatar">
            <img src="${notification.senderDetails?.profilePic || 'https://res.cloudinary.com/dzdnwsojc/image/upload/v1746804708/rkwqxwswd9plkd7wpoy7.jpg'}" 
                 alt="${notification.senderDetails?.username || 'System'}" 
                 class="avatar">
          </div>
          <div class="notification-content">
            <div class="notification-sender">
              ${notification.senderDetails?.username || 'System'}
              ${notification.senderDetails?.username === 'code_with_irfan' ? '<span title="Verified" class="verified-badge"><i class="fas fa-check-circle"></i></span>' : ''}
              ${readIcon}
            </div>
            <div class="notification-message">${notification.message}</div>
            <div class="notification-time">${formatTime(notification.createdAt)}</div>
            <div class="notification-actions">
              ${!isRead ? `
                <button class="notification-action-btn mark-read-btn" data-id="${notification._id}">
                  <i class="fas fa-check mr-1"></i> Mark as read
                </button>
              ` : ''}
              ${notification.senderDetails?._id ? `
                <a href="/api/v1/user/chat/${notification.senderDetails._id}" class="notification-action-btn view-chat-btn">
                  <i class="fas fa-comment-dots mr-1"></i> View chat
                </a>
              ` : ''}
            </div>
          </div>
        `;
        
        container.appendChild(notificationElement);
      });
      
      // Add event listeners to mark as read buttons
      document.querySelectorAll('.mark-read-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.stopPropagation();
          const notificationId = btn.dataset.id;
          await markNotificationAsRead(notificationId);
        });
      });
    }

    // Fetch notifications from server
    async function fetchNotifications() {
      try {
        const response = await fetch('/api/v1/user/notifications-all', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });
        
        const data = await response.json();
        
        if (data.success) {
          notifications = data.notifications;
          renderNotifications();
        }
      } catch (err) {
        console.error('Error fetching notifications:', err);
        document.getElementById('loadingState').classList.add('hidden');
        document.getElementById('emptyState').classList.remove('hidden');
      }
    }

    // Toast notification function
    function showToast(message, type = 'info') {
      const toast = document.createElement('div');
      toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-lg shadow-lg text-white ${type === 'success' ? 'bg-success' :
        type === 'error' ? 'bg-danger' :
          type === 'warning' ? 'bg-warning' : 'bg-primary'
        }`;
      toast.textContent = message;
      document.body.appendChild(toast);

      setTimeout(() => {
        toast.classList.add('opacity-0', 'transition-opacity');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }

    // Initialize the page
    document.addEventListener('DOMContentLoaded', () => {
      initDarkMode();
      fetchNotifications();
      
      // Add event listener for mark all as read button
      document.getElementById('markAllReadBtn').addEventListener('click', markAllNotificationsAsRead);
    });
  </script>
</body>

</html>